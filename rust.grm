include "rust-seq.grm"

define program
    [source_file] [NL]
end define

define _declaration_statement
      [const_item]
    | [macro_invocation]
    | [macro_definition]
    | [empty_statement]
    | [attribute_item]
    | [inner_attribute_item]
    | [mod_item]
    | [foreign_mod_item]
    | [struct_item]
    | [union_item]
    | [enum_item]
    | [type_item]
    | [function_item]
    | [function_signature_item]
    | [impl_item]
    | [trait_item]
    | [associated_type]
    | [let_declaration]
    | [use_declaration]
    | [extern_crate_declaration]
    | [static_item]
end define

define _expression
      [_expression_except_range]
    | [range_expression]
end define

define _expression_ending_with_block
      [unsafe_block]
    | [async_block]
    | [block]
    | [if_expression]
    | [if_let_expression]
    | [match_expression]
    | [while_expression]
    | [while_let_expression]
    | [loop_expression]
    | [for_expression]
    | [const_block]
end define

define _expression_except_range
      [unary_expression]
    | [reference_expression]
    | [try_expression]
    | [binary_expression]
    | [assignment_expression]
    | [compound_assignment_expr]
    | [type_cast_expression]
    | [call_expression]
    | [return_expression]
    | [yield_expression]
    | [_literal]
    | [id]
          | [_reserved_identifier]
    | [self]
    | [scoped_identifier]
    | [generic_function]
    | [await_expression]
    | [field_expression]
    | [array_expression]
    | [tuple_expression]
    | [macro_invocation]
    | [unit_expression]
    | [break_expression]
    | [continue_expression]
    | [index_expression]
    | [metavariable]
    | [closure_expression]
    | [parenthesized_expression]
    | [struct_expression]
    | [_expression_ending_with_block]
end define

define _expression_statement
      [_expression] ';
    | [_expression_ending_with_block]
end define

define _literal
      [string_literal]
    | [raw_string_literal]
    | [char_literal]
    | [boolean_literal]
    | [integer_literal]
    | [float_literal]
end define

define _literal_pattern
      [string_literal]
    | [raw_string_literal]
    | [char_literal]
    | [boolean_literal]
    | [integer_literal]
    | [float_literal]
    | [negative_literal]
end define

define _non_special_token
      [_literal]
    | [id]
    | [metavariable]
    | [mutable_specifier]
    | [self]
    | [super]
    | [crate]
    | ''
    | 'as
    | 'async
    | 'await
    | 'break
    | 'const
    | 'continue
    | 'default
    | 'enum
    | 'fn
    | 'for
    | 'if
    | 'impl
    | 'let
    | 'loop
    | 'match
    | 'mod
    | 'pub
    | 'return
    | 'static
    | 'struct
    | 'trait
    | 'type
    | 'union
    | 'unsafe
    | 'use
    | 'where
    | 'while
    | 'SAFENESS
    | 'OWNERSHIP
    | 'LIFETIME
end define

define _path
      [self]
          | [metavariable]
    | [super]
    | [crate]
    | [id]
    | [scoped_identifier]
    | [_reserved_identifier]
end define

define _pattern
      [_literal_pattern]
          | [id]
    | [scoped_identifier]
    | [tuple_pattern]
    | [tuple_struct_pattern]
    | [struct_pattern]
    | [ref_pattern]
    | [slice_pattern]
    | [captured_pattern]
    | [reference_pattern]
    | [remaining_field_pattern]
    | [mut_pattern]
    | [range_pattern]
    | [or_pattern]
    | [const_block]
    | '_
end define

define _statement
      [_expression_statement]
    | [_declaration_statement]
end define

define _token_pattern
      [token_tree_pattern]
    | [token_repetition_pattern]
    | [token_binding_pattern]
    | [_non_special_token]
end define

define _tokens
      [token_tree]
    | [token_repetition]
    | [_non_special_token]
end define

define _type
      [abstract_type]
    | [reference_type]
    | [metavariable]
    | [pointer_type]
    | [generic_type]
    | [scoped_type_identifier]
    | [tuple_type]
    | [unit_type]
    | [array_type]
    | [function_type]
    | [_type_identifier]
    | [macro_invocation]
    | [empty_type]
    | [dynamic_type]
    | [bounded_type]
      end define

define _use_clause
      [_path]
    | [use_as_clause]
    | [use_list]
    | [scoped_use_list]
    | [use_wildcard]
end define

define abstract_type
      'impl
    [IN] [NL] [SPOFF] 'trait ': [SPON] "([_type_identifier]|[scoped_type_identifier]|[generic_type]|[function_type])"
end define

define arguments
      '(
    ([attribute_item*] [_expression] [seq_1*]|[SP])
    (',|[SP])
    ')
end define

define array_expression
      '[
    [attribute_item*]
    ([_expression] '; [IN] [NL] [SPOFF] 'length ': [SPON] "[_expression]"|([_expression] [seq_2*]|[SP]) (',|[SP]))
    ']
end define

define array_type
      '[
    [IN] [NL] [SPOFF] 'element ': [SPON] "[_type]"
    ('; [IN] [NL] [SPOFF] 'length ': [SPON] "[_expression]"|[SP])
    ']
end define

define assignment_expression
[IN] [NL] [SPOFF] 'left ': [SPON] "[_expression]" '= [IN] [NL] [SPOFF] 'right ': [SPON] "[_expression]"
end define

define associated_type
      'type
    [IN] [NL] [SPOFF] 'name ': [SPON] "[_type_identifier]"
    [IN] [NL] [SPOFF] 'type_parameters ': [SPON] "([type_parameters]|[SP])"
    [IN] [NL] [SPOFF] 'bounds ': [SPON] "([trait_bounds]|[SP])"
    ';
end define

define async_block
      'async
    ('move|[SP])
    [block]
end define

define attribute_item
      '#
    '[
    [meta_item]
    ']
end define

define await_expression
[_expression] '. 'await
end define

define base_field_initializer
      '..
    [_expression]
end define

define binary_expression
      [IN] [NL] [SPOFF] 'left ': [SPON] "[_expression]" [IN] [NL] [SPOFF] 'operator ': [SPON] "'&&" [IN] [NL] [SPOFF] 'right ': [SPON] "[_expression]"
    | [IN] [NL] [SPOFF] 'left ': [SPON] "[_expression]" [IN] [NL] [SPOFF] 'operator ': [SPON] "'||" [IN] [NL] [SPOFF] 'right ': [SPON] "[_expression]"
    | [IN] [NL] [SPOFF] 'left ': [SPON] "[_expression]" [IN] [NL] [SPOFF] 'operator ': [SPON] "'&" [IN] [NL] [SPOFF] 'right ': [SPON] "[_expression]"
    | [IN] [NL] [SPOFF] 'left ': [SPON] "[_expression]" [IN] [NL] [SPOFF] 'operator ': [SPON] "'|" [IN] [NL] [SPOFF] 'right ': [SPON] "[_expression]"
    | [IN] [NL] [SPOFF] 'left ': [SPON] "[_expression]" [IN] [NL] [SPOFF] 'operator ': [SPON] "'^" [IN] [NL] [SPOFF] 'right ': [SPON] "[_expression]"
    | [IN] [NL] [SPOFF] 'left ': [SPON] "[_expression]" [IN] [NL] [SPOFF] 'operator ': [SPON] "('==|'!=|'<|'<=|'>|'>=)" [IN] [NL] [SPOFF] 'right ': [SPON] "[_expression]"
    | [IN] [NL] [SPOFF] 'left ': [SPON] "[_expression]" [IN] [NL] [SPOFF] 'operator ': [SPON] "('<<|'>>)" [IN] [NL] [SPOFF] 'right ': [SPON] "[_expression]"
    | [IN] [NL] [SPOFF] 'left ': [SPON] "[_expression]" [IN] [NL] [SPOFF] 'operator ': [SPON] "('+|'-)" [IN] [NL] [SPOFF] 'right ': [SPON] "[_expression]"
    | [IN] [NL] [SPOFF] 'left ': [SPON] "[_expression]" [IN] [NL] [SPOFF] 'operator ': [SPON] "('*|'/|'%)" [IN] [NL] [SPOFF] 'right ': [SPON] "[_expression]"
end define

define block
      '{
    [_statement*]
    ([_expression]|[SP])
    '}
end define

define boolean_literal
      'true
    | 'false
end define

define bounded_type
([lifetime] '+ [_type]|[_type] '+ [_type]|[_type] '+ [lifetime])
end define

define bracketed_type
      '<
    ([_type]|[qualified_type])
    '>
end define

define break_expression
'break ([loop_label]|[SP]) ([_expression]|[SP])
end define

define call_expression
[IN] [NL] [SPOFF] 'function ': [SPON] "[_expression_except_range]" [IN] [NL] [SPOFF] 'arguments ': [SPON] "[arguments]"
end define

define captured_pattern
      [id]
    '@
    [_pattern]
end define

define closure_expression
('move|[SP]) [IN] [NL] [SPOFF] 'parameters ': [SPON] "[closure_parameters]" (('-> [IN] [NL] [SPOFF] 'return_type ': [SPON] "[_type]"|[SP]) [IN] [NL] [SPOFF] 'body ': [SPON] "[block]"|[IN] [NL] [SPOFF] 'body ': [SPON] "[_expression]")
end define

define closure_parameters
      '|
    (([_pattern]|[parameter]) [seq_3*]|[SP])
    '|
end define

define COMMENT
      [line_comment]
    | [block_comment]
end define

define compound_assignment_expr
[IN] [NL] [SPOFF] 'left ': [SPON] "[_expression]" [IN] [NL] [SPOFF] 'operator ': [SPON] "('+=|'-=|'*=|'/=|'%=|'&=|'|=|'^=|'<<=|'>>=)" [IN] [NL] [SPOFF] 'right ': [SPON] "[_expression]"
end define

define const_block
      'const
    [IN] [NL] [SPOFF] 'body ': [SPON] "[block]"
end define

define const_item
      ([visibility_modifier]|[SP])
    'const
    [IN] [NL] [SPOFF] 'name ': [SPON] "[id]"
    ':
    [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
    ('= [IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]"|[SP])
    ';
end define

define const_parameter
      'const
    [IN] [NL] [SPOFF] 'name ': [SPON] "[id]"
    ':
    [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
end define

define constrained_type_parameter
      [IN] [NL] [SPOFF] 'left ': [SPON] "([lifetime]|[_type_identifier])"
    [IN] [NL] [SPOFF] 'bounds ': [SPON] "[trait_bounds]"
end define

define continue_expression
'continue ([loop_label]|[SP])
end define

define crate
'crate
end define

define declaration_list
      '{
    [_declaration_statement*]
    '}
end define

define dynamic_type
      'dyn
    [IN] [NL] [SPOFF] 'trait ': [SPON] "([_type_identifier]|[scoped_type_identifier]|[generic_type]|[function_type])"
end define

define else_clause
      'else
    ([block]|[if_expression]|[if_let_expression])
end define

define empty_statement
';
end define

define empty_type
'!
end define

define enum_item
      ([visibility_modifier]|[SP])
    'enum
    [IN] [NL] [SPOFF] 'name ': [SPON] "[_type_identifier]"
    [IN] [NL] [SPOFF] 'type_parameters ': [SPON] "([type_parameters]|[SP])"
    ([where_clause]|[SP])
    [IN] [NL] [SPOFF] 'body ': [SPON] "[enum_variant_list]"
end define

define enum_variant
      ([visibility_modifier]|[SP])
    [IN] [NL] [SPOFF] 'name ': [SPON] "[id]"
    [IN] [NL] [SPOFF] 'body ': [SPON] "(([field_declaration_list]|[ordered_field_declaration_list])|[SP])"
    ('= [IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]"|[SP])
end define

define enum_variant_list
      '{
    ([attribute_item*] [enum_variant] [seq_4*]|[SP])
    (',|[SP])
    '}
end define

token escape_sequence
'\ ([^xu]|u[0-9a-fA-F]{4}|u{[0-9a-fA-F]+}|x[0-9a-fA-F]{2})
end token

define extern_crate_declaration
      ([visibility_modifier]|[SP])
    'extern
    [crate]
    [IN] [NL] [SPOFF] 'name ': [SPON] "[id]"
    ('as [IN] [NL] [SPOFF] 'alias ': [SPON] "[id]"|[SP])
    ';
end define

define extern_modifier
      'extern
    ([string_literal]|[SP])
end define

define field_declaration
      ([visibility_modifier]|[SP])
    [IN] [NL] [SPOFF] 'name ': [SPON] "[_field_identifier]"
    ':
    [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
end define

define field_declaration_list
      '{
    ([attribute_item*] [field_declaration] [seq_5*]|[SP])
    (',|[SP])
    '}
end define

define field_expression
[IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]" '. [IN] [NL] [SPOFF] 'field ': [SPON] "([_field_identifier]|[integer_literal])"
end define

define field_initializer
      [attribute_item*]
    [IN] [NL] [SPOFF] 'name ': [SPON] "[_field_identifier]"
    ':
    [IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]"
end define

define field_initializer_list
      '{
    (([shorthand_field_initializer]|[field_initializer]|[base_field_initializer]) [seq_6*]|[SP])
    (',|[SP])
    '}
end define

define field_pattern
      ('ref|[SP])
    ([mutable_specifier]|[SP])
    ([IN] [NL] [SPOFF] 'name ': [SPON] ""|[IN] [NL] [SPOFF] 'name ': [SPON] "[_field_identifier]" ': [IN] [NL] [SPOFF] 'pattern ': [SPON] "[_pattern]")
end define

define for_expression
      ([loop_label] ':|[SP])
    'for
    [IN] [NL] [SPOFF] 'pattern ': [SPON] "[_pattern]"
    'in
    [IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]"
    [IN] [NL] [SPOFF] 'body ': [SPON] "[block]"
end define

define for_lifetimes
      'for
    '<
    [lifetime] [seq_7*]
    (',|[SP])
    '>
end define

define foreign_mod_item
      ([visibility_modifier]|[SP])
    [extern_modifier]
    (';|[IN] [NL] [SPOFF] 'body ': [SPON] "[declaration_list]")
end define

define fragment_specifier
      'block
    | 'expr
    | 'ident
    | 'item
    | 'lifetime
    | 'literal
    | 'meta
    | 'pat
    | 'path
    | 'stmt
    | 'tt
    | 'ty
    | 'vis
end define

define function_item
      ([visibility_modifier]|[SP])
    [IN] [NL] [SPOFF] 'function_modifiers ': [SPON] "([function_modifiers]|[SP])"
    'fn
    [IN] [NL] [SPOFF] 'name ': [SPON] "([id]|[metavariable])"
    [IN] [NL] [SPOFF] 'type_parameters ': [SPON] "([type_parameters]|[SP])"
    [IN] [NL] [SPOFF] 'parameters ': [SPON] "[parameters]"
    ('-> [IN] [NL] [SPOFF] 'return_type ': [SPON] "[_type]"|[SP])
    ([where_clause]|[SP])
    [IN] [NL] [SPOFF] 'body ': [SPON] "[block]"
end define

define function_signature_item
      ([visibility_modifier]|[SP])
    ([function_modifiers]|[SP])
    'fn
    [IN] [NL] [SPOFF] 'name ': [SPON] "([id]|[metavariable])"
    [IN] [NL] [SPOFF] 'type_parameters ': [SPON] "([type_parameters]|[SP])"
    [IN] [NL] [SPOFF] 'parameters ': [SPON] "[parameters]"
    ('-> [IN] [NL] [SPOFF] 'return_type ': [SPON] "[_type]"|[SP])
    ([where_clause]|[SP])
    ';
end define

define function_type
      ([for_lifetimes]|[SP])
    ([IN] [NL] [SPOFF] 'trait ': [SPON] "([_type_identifier]|[scoped_type_identifier])"|[IN] [NL] [SPOFF] 'safeness ': [SPON] "([function_modifiers]|[SP]) 'fn") [IN] [NL] [SPOFF] 'parameters ': [SPON] "[parameters]"
    ('-> [IN] [NL] [SPOFF] 'return_type ': [SPON] "[_type]"|[SP])
end define

define generic_function
[IN] [NL] [SPOFF] 'function ': [SPON] "([id]|[scoped_identifier]|[field_expression])" ':: [IN] [NL] [SPOFF] 'type_arguments ': [SPON] "[type_arguments]"
end define

define generic_type
[IN] [NL] [SPOFF] 'type ': [SPON] "([_type_identifier]|[scoped_type_identifier])" [IN] [NL] [SPOFF] 'type_arguments ': [SPON] "[type_arguments]"
end define

define generic_type_with_turbofish
      [IN] [NL] [SPOFF] 'type ': [SPON] "([_type_identifier]|[scoped_identifier])"
    '::
    [IN] [NL] [SPOFF] 'type_arguments ': [SPON] "[type_arguments]"
end define

define higher_ranked_trait_bound
      'for
    [IN] [NL] [SPOFF] 'type_parameters ': [SPON] "[type_parameters]"
    [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
end define

define if_expression
      'if
    [IN] [NL] [SPOFF] 'condition ': [SPON] "[_expression]"
    [IN] [NL] [SPOFF] 'consequence ': [SPON] "[block]"
    ([IN] [NL] [SPOFF] 'alternative ': [SPON] "[else_clause]"|[SP])
end define

define if_let_expression
      'if
    'let
    [IN] [NL] [SPOFF] 'pattern ': [SPON] "[_pattern]"
    '=
    [IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]"
    [IN] [NL] [SPOFF] 'consequence ': [SPON] "[block]"
    ([IN] [NL] [SPOFF] 'alternative ': [SPON] "[else_clause]"|[SP])
end define

define impl_item
      [IN] [NL] [SPOFF] 'safeness ': [SPON] "[safe_impl]"
    [IN] [NL] [SPOFF] 'type_parameters ': [SPON] "([type_parameters]|[SP])"
    ([IN] [NL] [SPOFF] 'trait ': [SPON] "([_type_identifier]|[scoped_type_identifier]|[generic_type])" 'for|[SP])
    [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
    ([where_clause]|[SP])
    ([IN] [NL] [SPOFF] 'body ': [SPON] "[declaration_list]"|';)
end define

define index_expression
[_expression] '[ [_expression] ']
end define

define inner_attribute_item
      '#
    '!
    '[
    [meta_item]
    ']
end define

define last_match_arm
      [attribute_item*]
    [IN] [NL] [SPOFF] 'pattern ': [SPON] "[match_pattern]"
    '=>
    [IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]"
    (',|[SP])
end define

define let_declaration
      'let
    ([mutable_specifier]|[SP])
    [IN] [NL] [SPOFF] 'pattern ': [SPON] "[_pattern]"
    (': [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"|[SP])
    ('= [IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]"|[SP])
    ';
end define

define lifetime
'' [id]
end define

define loop_expression
      ([loop_label] ':|[SP])
    'loop
    [IN] [NL] [SPOFF] 'body ': [SPON] "[block]"
end define

define loop_label
      ''
    [id]
end define

define macro_definition
      'macro_rules!
    [IN] [NL] [SPOFF] 'name ': [SPON] "([id]|[_reserved_identifier])"
    ('( [seq_8*] ([macro_rule]|[SP]) ') ';|'{ [seq_9*] ([macro_rule]|[SP]) '})
end define

define macro_invocation
      [IN] [NL] [SPOFF] 'macro ': [SPON] "([scoped_identifier]|[id]|[_reserved_identifier])"
    '!
    [token_tree]
end define

define macro_rule
      [IN] [NL] [SPOFF] 'left ': [SPON] "[token_tree_pattern]"
    '=>
    [IN] [NL] [SPOFF] 'right ': [SPON] "[token_tree]"
end define

define match_arm
      [attribute_item*]
    [IN] [NL] [SPOFF] 'pattern ': [SPON] "([macro_invocation]|[match_pattern])"
    '=>
    ([IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]" ',|[IN] [NL] [SPOFF] 'value ': [SPON] "[_expression_ending_with_block]")
end define

define match_block
      '{
    ([match_arm*] |[SP])
    '}
end define

define match_expression
      'match
    [IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]"
    [IN] [NL] [SPOFF] 'body ': [SPON] "[match_block]"
end define

define match_pattern
      [_pattern]
    ('if [IN] [NL] [SPOFF] 'condition ': [SPON] "[_expression]"|[SP])
end define

define meta_arguments
      '(
    (([meta_item]|[_literal]) [seq_10*]|[SP])
    (',|[SP])
    ')
end define

define meta_item
      [_path]
    (('= [IN] [NL] [SPOFF] 'value ': [SPON] "[_literal]"|[IN] [NL] [SPOFF] 'arguments ': [SPON] "[meta_arguments]")|[SP])
end define

define mod_item
      ([visibility_modifier]|[SP])
    'mod
    [IN] [NL] [SPOFF] 'name ': [SPON] "[id]"
    (';|[IN] [NL] [SPOFF] 'body ': [SPON] "[declaration_list]")
end define

define mut_pattern
[mutable_specifier] [_pattern]
end define

define mutable_specifier
'mut
end define

define negative_literal
      '-
    ([integer_literal]|[float_literal])
end define

define optional_type_parameter
      [IN] [NL] [SPOFF] 'name ': [SPON] "([_type_identifier]|[constrained_type_parameter])"
    '=
    [IN] [NL] [SPOFF] 'default_type ': [SPON] "[_type]"
end define

define or_pattern
[_pattern] '| [_pattern]
end define

define ordered_field_declaration_list
      '(
    ([attribute_item*] ([visibility_modifier]|[SP]) [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]" [seq_11*]|[SP])
    (',|[SP])
    ')
end define

define parameter
      ([mutable_specifier]|[SP])
    [IN] [NL] [SPOFF] 'pattern ': [SPON] "([_pattern]|[self]|[_reserved_identifier])"
    ':
    [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
end define

define parameters
      '(
    (([attribute_item]|[SP]) ([parameter]|[self_parameter]|[variadic_parameter]|'_|[_type]) [seq_12*]|[SP])
    (',|[SP])
    ')
end define

define parenthesized_expression
      '(
    [_expression]
    ')
end define

define pointer_type
      '*
    ('const|[mutable_specifier])
    [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
end define

define qualified_type
      [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
    'as
    [IN] [NL] [SPOFF] 'alias ': [SPON] "[_type]"
end define

define range_expression
([_expression] ('..|'...|'..=) [_expression]|[_expression] '..|'.. [_expression]|'..)
end define

define range_pattern
      ([_literal_pattern]|[_path])
    ('...|'..=)
    ([_literal_pattern]|[_path])
end define

define ref_pattern
      'ref
    [_pattern]
end define

define reference_expression
'& ([mutable_specifier]|[SP]) [IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]"
end define

define reference_pattern
      '&
    ([mutable_specifier]|[SP])
    [_pattern]
end define

define reference_type
      '&
    ([lifetime]|[SP])
    ([mutable_specifier]|[SP])
    [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
end define

define remaining_field_pattern
'..
end define

define removed_trait_bound
      '?
    [_type]
end define

define return_expression
      'return [_expression]
    | 'return
end define

define safe_impl
      ([safeness]|[SP])
    'impl
end define

define safe_trait
      ([safeness]|[SP])
    'trait
end define

define safeness
      'unsafe
end define

define scoped_identifier
      [IN] [NL] [SPOFF] 'path ': [SPON] "(([_path]|[bracketed_type]|)|[SP])"
    '::
    [IN] [NL] [SPOFF] 'name ': [SPON] "[id]"
end define

define scoped_type_identifier
      [IN] [NL] [SPOFF] 'path ': [SPON] "(([_path]||[bracketed_type]|[generic_type])|[SP])"
    '::
    [IN] [NL] [SPOFF] 'name ': [SPON] "[_type_identifier]"
end define

define scoped_type_identifier_in_expression_position
[IN] [NL] [SPOFF] 'path ': [SPON] "(([_path]|)|[SP])" ':: [IN] [NL] [SPOFF] 'name ': [SPON] "[_type_identifier]"
end define

define scoped_use_list
      [IN] [NL] [SPOFF] 'path ': [SPON] "([_path]|[SP])"
    '::
    [IN] [NL] [SPOFF] 'list ': [SPON] "[use_list]"
end define

define self
'self
end define

define self_parameter
      ('&|[SP])
    ([lifetime]|[SP])
    ([mutable_specifier]|[SP])
    [self]
end define

define shorthand_field_initializer
      [attribute_item*]
    [id]
end define

define slice_pattern
      '[
    ([_pattern] [seq_13*]|[SP])
    (',|[SP])
    ']
end define

define source_file
    [_statement*]
end define

define static_item
      ([visibility_modifier]|[SP])
    'static
    ('ref|[SP])
    ([mutable_specifier]|[SP])
    [IN] [NL] [SPOFF] 'name ': [SPON] "[id]"
    ':
    [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
    ('= [IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]"|[SP])
    ';
end define

define string_literal
          [seq_14*]
    "'\""
end define

define struct_expression
      [IN] [NL] [SPOFF] 'name ': [SPON] "([_type_identifier]||[generic_type_with_turbofish])"
    [IN] [NL] [SPOFF] 'body ': [SPON] "[field_initializer_list]"
end define

define struct_item
      ([visibility_modifier]|[SP])
    'struct
    [IN] [NL] [SPOFF] 'name ': [SPON] "[_type_identifier]"
    [IN] [NL] [SPOFF] 'type_parameters ': [SPON] "([type_parameters]|[SP])"
    (([where_clause]|[SP]) [IN] [NL] [SPOFF] 'body ': [SPON] "[field_declaration_list]"|[IN] [NL] [SPOFF] 'body ': [SPON] "[ordered_field_declaration_list]" ([where_clause]|[SP]) ';|';)
end define

define struct_pattern
      [IN] [NL] [SPOFF] 'type ': [SPON] "([_type_identifier]|[scoped_type_identifier])"
    '{
    (([field_pattern]|[remaining_field_pattern]) [seq_15*]|[SP])
    (',|[SP])
    '}
end define

define super
'super
end define

define token_binding_pattern
[IN] [NL] [SPOFF] 'name ': [SPON] "[metavariable]" ': [IN] [NL] [SPOFF] 'type ': [SPON] "[fragment_specifier]"
end define

define token_repetition
      '$
    '(
    [_tokens*]
    ')
    ([^+*?]+|[SP])
    ('+|'*|'?)
end define

define token_repetition_pattern
      '$
    '(
    [_token_pattern*]
    ')
    ([^+*?]+|[SP])
    ('+|'*|'?)
end define

define token_tree
      '( [_tokens*] ')
    | '[ [_tokens*] ']
    | '{ [_tokens*] '}
end define

define token_tree_pattern
      '( [_token_pattern*] ')
    | '[ [_token_pattern*] ']
    | '{ [_token_pattern*] '}
end define

define trait_bounds
      ':
    ([_type]|[lifetime]|[higher_ranked_trait_bound]|[removed_trait_bound]) [seq_16*]
end define

define trait_item
      ([visibility_modifier]|[SP])
    [IN] [NL] [SPOFF] 'safeness ': [SPON] "[safe_trait]"
    [IN] [NL] [SPOFF] 'name ': [SPON] "[_type_identifier]"
    [IN] [NL] [SPOFF] 'type_parameters ': [SPON] "([type_parameters]|[SP])"
    [IN] [NL] [SPOFF] 'bounds ': [SPON] "([trait_bounds]|[SP])"
    ([where_clause]|[SP])
    [IN] [NL] [SPOFF] 'body ': [SPON] "[declaration_list]"
end define

define try_expression
      [_expression]
    '?
end define

define tuple_expression
      '(
    [attribute_item*]
    [_expression] ',
    [seq_17*]
    ([_expression]|[SP])
    ')
end define

define tuple_pattern
      '(
    ([_pattern] [seq_18*]|[SP])
    (',|[SP])
    ')
end define

define tuple_struct_pattern
      [IN] [NL] [SPOFF] 'type ': [SPON] "([id]|[scoped_identifier])"
    '(
    ([_pattern] [seq_19*]|[SP])
    (',|[SP])
    ')
end define

define tuple_type
      '(
    [_type] [seq_20*]
    (',|[SP])
    ')
end define

define type_arguments
      "'<"
    ([_type]|[type_binding]|[lifetime]|[_literal]|[block]) [seq_21*]
    (',|[SP])
    '>
end define

define type_binding
      [IN] [NL] [SPOFF] 'name ': [SPON] "[_type_identifier]"
    [IN] [NL] [SPOFF] 'type_arguments ': [SPON] "([type_arguments]|[SP])"
    '=
    [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
end define

define type_cast_expression
      [IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]"
    'as
    [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
end define

define type_item
      ([visibility_modifier]|[SP])
    'type
    [IN] [NL] [SPOFF] 'name ': [SPON] "[_type_identifier]"
    [IN] [NL] [SPOFF] 'type_parameters ': [SPON] "([type_parameters]|[SP])"
    '=
    [IN] [NL] [SPOFF] 'type ': [SPON] "[_type]"
    ';
end define

define type_parameters
'< ([lifetime]|[metavariable]|[_type_identifier]|[constrained_type_parameter]|[optional_type_parameter]|[const_parameter]) [seq_22*] (',|[SP]) '>
end define

define unary_expression
('-|'*|'!) [_expression]
end define

define union_item
      ([visibility_modifier]|[SP])
    'union
    [IN] [NL] [SPOFF] 'name ': [SPON] "[_type_identifier]"
    [IN] [NL] [SPOFF] 'type_parameters ': [SPON] "([type_parameters]|[SP])"
    ([where_clause]|[SP])
    [IN] [NL] [SPOFF] 'body ': [SPON] "[field_declaration_list]"
end define

define unit_expression
      '(
    ')
end define

define unit_type
      '(
    ')
end define

define unsafe_block
      [safeness]
    [block]
end define

define use_as_clause
      [IN] [NL] [SPOFF] 'path ': [SPON] "[_path]"
    'as
    [IN] [NL] [SPOFF] 'alias ': [SPON] "[id]"
end define

define use_declaration
      ([visibility_modifier]|[SP])
    'use
    [IN] [NL] [SPOFF] 'argument ': [SPON] "[_use_clause]"
    ';
end define

define use_list
      '{
    (([_use_clause]) [seq_23*]|[SP])
    (',|[SP])
    '}
end define

define use_wildcard
      ([_path] '::|[SP])
    '*
end define

define variadic_parameter
'...
end define

define visibility_modifier
([crate]|'pub ('( ([self]|[super]|[crate]|'in [_path]) ')|[SP]))
end define

define where_clause
      'where
    [where_predicate] [seq_24*]
    (',|[SP])
end define

define where_predicate
      [IN] [NL] [SPOFF] 'left ': [SPON] "([lifetime]|[_type_identifier]|[scoped_type_identifier]|[generic_type]|[reference_type]|[pointer_type]|[tuple_type]|[higher_ranked_trait_bound]|)"
    [IN] [NL] [SPOFF] 'bounds ': [SPON] "[trait_bounds]"
end define

define while_expression
      ([loop_label] ':|[SP])
    'while
    [IN] [NL] [SPOFF] 'condition ': [SPON] "[_expression]"
    [IN] [NL] [SPOFF] 'body ': [SPON] "[block]"
end define

define while_let_expression
      ([loop_label] ':|[SP])
    'while
    'let
    [IN] [NL] [SPOFF] 'pattern ': [SPON] "[_pattern]"
    '=
    [IN] [NL] [SPOFF] 'value ': [SPON] "[_expression]"
    [IN] [NL] [SPOFF] 'body ': [SPON] "[block]"
end define

define yield_expression
      'yield [_expression]
    | 'yield
end define
